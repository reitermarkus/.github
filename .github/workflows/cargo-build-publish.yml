on:
  workflow_call:
    inputs:
      toolchain:
        description: 'Rust toolchain'
        default: 'stable'
        type: string
      test-args:
        description: 'Cargo test arguments'
        default: '--workspace'
        type: string
    secrets:
      CRATESIO_TOKEN:
        required: false

name: CI

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Check cargo config
        run: |
          if [[ -f .cargo/config.toml ]]; then
            cargo_config=".cargo/config.toml"
          elif [[ -f .cargo/config ]]; then
            cargo_config=".cargo/config"
          fi

          echo "::set-output name=cargo-config::${cargo_config}"
        id: cargo-config

      - name: Get target
        uses: SebRollen/toml-action@e6b4093b7c0220574cc9b6279f3be8bc850f88f6
        if: ${{ steps.cargo-config.outputs.cargo-config != '' }}
        id: cargo-target
        with:
          file: ${{ steps.cargo-config.outputs.cargo-config }}
          field: 'build.target'

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy
          target: ${{ steps.cargo-target.outputs.value }}

      - name: Set up cache
        uses: Swatinem/rust-cache@f8f67b7515e98e4ac991ccb5c11240861e0f712b

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: ${{ (steps.cargo-target.outputs.value && format('--target {0}', steps.cargo-target.outputs.value)) || '' }}
          use-cross: ${{ !!steps.cargo-target.outputs.value }}

      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ github.token }}
          args: ${{ (steps.cargo-target.outputs.value && format('--target {0}', steps.cargo-target.outputs.value)) || '' }} -- -D warnings
          use-cross: ${{ !!steps.cargo-target.outputs.value }}

      - name: Generate build/test matrix
        run: |
          if [[ -n "${target}" ]]; then
            test_matrix="
              {
                \"include\": [{
                  \"os\": \"ubuntu-latest\",
                  \"target\": $(jq -R <<< "${target}"),
                  \"test-args\": $(jq -R <<< "${test_args} --target ${target}"),
                  \"use-cross\": true
                }]
              }
            "
          else
            test_matrix='
              {
                "include": [
                  {
                    "os": "ubuntu-latest",
                    "target": "x86_64-unknown-linux-gnu"
                  },
                  {
                    "os": "macos-latest",
                    "target": "x86_64-apple-darwin"
                  }
                ]
              }
            '
          fi

          jq -C <<< "${test_matrix}"

          echo "::set-output name=matrix::$(jq -c <<< "${test_matrix}")"
        env:
          target: ${{ steps.cargo-target.outputs.value }}
          test_args: ${{ inputs.test-args }}
        id: matrix

  test:
    name: test (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix: ${{ fromJSON(needs.lint.outputs.matrix) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          override: true
          target: ${{ matrix.target }}

      - name: Set up cache
        uses: Swatinem/rust-cache@f8f67b7515e98e4ac991ccb5c11240861e0f712b

      - name: Run tests without default features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: >
            --no-fail-fast
            ${{ matrix.test-args }}
            --no-default-features
          use-cross: ${{ matrix.use-cross }}

      - name: Run tests with default features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: >
            --no-fail-fast
            ${{ matrix.test-args }}
          use-cross: ${{ matrix.use-cross }}

      - name: Run tests with all features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: >
            --no-fail-fast
            ${{ matrix.test-args }}
            --all-features
          use-cross: ${{ matrix.use-cross }}

  build:
    name: build (${{ matrix.target }})
    outputs:
      artifact: ${{ steps.artifact.outputs.name }}
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix: ${{ fromJSON(needs.lint.outputs.matrix) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          override: true
          target: ${{ matrix.target }}

      - name: Set up cache
        uses: Swatinem/rust-cache@f8f67b7515e98e4ac991ccb5c11240861e0f712b

      - name: Build with all features
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release
            --target ${{ matrix.target }}
            --all-features
          use-cross: ${{ matrix.use-cross }}

      - name: Archive artifacts
        id: artifact
        run: |
          set -x

          target_dir="target/${target}/release/"

          metadata="$(cargo metadata --format-version 1 --no-deps)"
          package_name="$(jq -r '.packages[0].name' <<< "${metadata}")"
          files="$(jq "[.packages[0].targets[] | select(.kind[] | contains(\"bin\")) | .name]" <<< "${metadata}")"

          if [[ $(jq -r 'length' <<< "${files}") -eq 0 ]]; then
            exit
          fi

          artifact_name="${package_name}-${target}"
          artifacts_dir="artifacts"
          artifact_path="${artifacts_dir}/${artifact_name}.tar.gz"

          mkdir "${artifacts_dir}"

          jq -r '.[]' <<< "${files}" | \
            tar -cvzf "${artifact_path}" -C "${target_dir}" -T -

          tar -tf "${artifact_path}"
          ls -al "${artifact_path}"

          echo "::set-output name=name::${artifact_name}"
          echo "::set-output name=path::${artifact_path}"
        env:
          target: ${{ matrix.target }}

      - name: Upload artifacts
        if: ${{ steps.artifact.outputs.path }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: ${{ steps.artifact.outputs.path }}
          if-no-files-found: error

  publish:
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          override: true

      - name: Set up cache
        uses: Swatinem/rust-cache@f8f67b7515e98e4ac991ccb5c11240861e0f712b

      - name: Check if crate should be published
        uses: SebRollen/toml-action@e6b4093b7c0220574cc9b6279f3be8bc850f88f6
        id: cargo-toml-publish
        with:
          file: Cargo.toml
          field: 'package.publish'

      - name: Download artifacts
        id: download-artifacts
        if: needs.build.outputs.artifact
        uses: actions/download-artifact@v3
        with:
          path:
            ${{ runner.temp }}/artifacts

      - name: Log into crates.io
        if: steps.cargo-toml-publish.outputs.value != 'false' && github.event_name != 'pull_request'
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: -- ${{ secrets.CRATESIO_TOKEN }}

      - name: Upload GitHub release artifacts
        if: needs.build.outputs.artifact != '' && github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          draft: ${{ !startsWith(github.ref, 'refs/tags/v') }}
          files: |
            ${{ steps.download-artifacts.outputs.download-path }}/*/*

      - name: Publish crate
        if: steps.cargo-toml-publish.outputs.value != 'false'
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: ${{ !startsWith(github.ref, 'refs/tags/v') && '--dry-run' || '' }}
