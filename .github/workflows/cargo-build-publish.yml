on:
  workflow_call:
    inputs:
      toolchain:
        description: 'Rust toolchain'
        default: ''
        type: string
      test-args:
        description: 'Cargo test arguments'
        default: '--workspace'
        type: string
    secrets:
      CRATESIO_TOKEN:
        required: false

name: CI

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: '1'
  CROSS_CONTAINER_UID: '0'
  CROSS_CONTAINER_GID: '0'
  CROSS_DEBUG: '1'

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
    
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Set up cache
        uses: Swatinem/rust-cache@3cf7f8cc28d1b4e7d01e3783be10a97d55d483c8 # v2.7.1

      - name: Run cargo fmt
        run: cargo fmt -- --check

  lint:
    outputs:
      toolchain: ${{ steps.toolchain.outputs.toolchain }}
      matrix: ${{ steps.matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Check cargo config
        run: |
          if [[ -f .cargo/config.toml ]]; then
            cargo_config=".cargo/config.toml"
          elif [[ -f .cargo/config ]]; then
            cargo_config=".cargo/config"
          fi

          if [[ -n "${cargo_config}" ]]; then
            echo "cargo-config=${cargo_config}" >> "${GITHUB_OUTPUT}"
          fi
        id: cargo-config

      - name: Get target
        uses: SebRollen/toml-action@9062fbef52816d61278d24ce53c8070440e1e8dd
        if: steps.cargo-config.outputs.cargo-config
        id: cargo-target
        with:
          file: ${{ steps.cargo-config.outputs.cargo-config }}
          field: 'build.target'

      - name: Get toolchain
        id: toolchain
        run: |
          if [[ -z "${toolchain}" ]]; then
            if [[ -f rust-toolchain ]]; then
              toolchain="$(cat rust-toolchain)"
            else
              toolchain='stable'
            fi
          fi

          if [[ "${target}" =~ xtensa* ]]; then
            echo "Installing Xtensa toolchain â€¦"
            curl -fSsL 'https://raw.githubusercontent.com/esp-rs/rust-build/HEAD/install-rust-toolchain.sh' | \
              bash -s -- --extra-crates ldproxy --export-file ~/esp-rust.sh

            eval "$(sed 's/export /echo /' ~/esp-rust.sh)" >> "${GITHUB_ENV}"
            cat "${GITHUB_ENV}"

            components=''
            target=''
          fi

          if [[ -n "${toolchain}" ]]; then
            echo "toolchain=${toolchain}" >> "${GITHUB_OUTPUT}"
          fi

          if [[ -n "${components}" ]]; then
            echo "components=${components}" >> "${GITHUB_OUTPUT}"
          fi

          if [[ -n "${target}" ]]; then
            echo "target=${target}" >> "${GITHUB_OUTPUT}"
          fi
        env:
          toolchain: ${{ inputs.toolchain }}
          components: 'clippy'
          target: ${{ steps.cargo-target.outputs.value }}

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.toolchain.outputs.toolchain }}
          components: ${{ steps.toolchain.outputs.components }}
          targets: ${{ steps.toolchain.outputs.target }}

      - name: Set up cache
        uses: Swatinem/rust-cache@3cf7f8cc28d1b4e7d01e3783be10a97d55d483c8 # v2.7.1

      - name: Run cargo check
        run: cargo check ${{ (steps.cargo-target.outputs.value && format('--target {0}', steps.cargo-target.outputs.value)) || '' }}

      - name: Run cargo clippy
        run: cargo clippy ${{ (steps.cargo-target.outputs.value && format('--target {0}', steps.cargo-target.outputs.value)) || '' }} -- -D warnings

      - name: Generate build/test matrix
        run: |
          if [[ -n "${target}" ]]; then
            test_matrix='[{
              "os": "ubuntu-latest",
              "use-cross": true
            }]'
            
            test_args+=" --target ${target}"
          else
            test_matrix='[{
              "os": "ubuntu-latest",
              "target": "x86_64-unknown-linux-gnu"
            }, {
              "os": "macos-latest",
              "target": "x86_64-apple-darwin"
            }]'
          fi
          
          test_matrix="$(
            jq -c \
              --arg toolchain "${toolchain}" \
              --arg target "${target}" \
              --arg test_args "${test_args}" \
              '
                map(.toolchain = (.toolchain // $toolchain) | .target = (.target // $target) | .["test-args"] = $test_args) |
                  {"include": .}
              ' \
              <<< "${test_matrix}"
          )"

          jq -C <<< "${test_matrix}"

          echo "matrix=${test_matrix}" >> "${GITHUB_OUTPUT}"
        env:
          toolchain: ${{ steps.toolchain.outputs.toolchain }}
          target: ${{ steps.toolchain.outputs.target }}
          test_args: ${{ inputs.test-args }}
        id: matrix

  test:
    name: test (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix: ${{ fromJSON(needs.lint.outputs.matrix) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          targets: ${{ matrix.target }}

      - name: Set up cache
        uses: Swatinem/rust-cache@3cf7f8cc28d1b4e7d01e3783be10a97d55d483c8 # v2.7.1

      - name: Run tests without default features
        run: cargo test --no-fail-fast ${{ matrix.test-args }} --no-default-features

      - name: Run tests with default features
        run: cargo test --no-fail-fast ${{ matrix.test-args }}

      - name: Run tests with all features
        run: cargo test --no-fail-fast ${{ matrix.test-args }} --all-features

  build:
    name: build (${{ matrix.target }})
    outputs:
      artifact: ${{ steps.artifact.outputs.name }}
    runs-on: ${{ matrix.os }}
    needs: [fmt, lint]
    strategy:
      matrix: ${{ fromJSON(needs.lint.outputs.matrix) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          targets: ${{ matrix.target }}

      - name: Set up cache
        uses: Swatinem/rust-cache@3cf7f8cc28d1b4e7d01e3783be10a97d55d483c8 # v2.7.1

      - name: Build with all features
        run: cargo build --release --target ${{ matrix.target }} --all-features

      - name: Archive artifacts
        id: artifact
        run: |
          set -x

          target_dir="target/${target}/release/"

          metadata="$(cargo metadata --format-version 1 --no-deps)"
          package_name="$(jq -r '.packages[0].name' <<< "${metadata}")"
          files="$(jq "[.packages[0].targets[] | select(.kind[] | contains(\"bin\")) | .name]" <<< "${metadata}")"

          if [[ $(jq -r 'length' <<< "${files}") -eq 0 ]]; then
            exit
          fi

          artifact_name="${package_name}-${target}"
          artifacts_dir="artifacts"
          artifact_path="${artifacts_dir}/${artifact_name}.tar.gz"

          mkdir "${artifacts_dir}"

          jq -r '.[]' <<< "${files}" | \
            tar -cvzf "${artifact_path}" -C "${target_dir}" -T -

          tar -tf "${artifact_path}"
          ls -al "${artifact_path}"

          echo "name=${artifact_name}" >> "${GITHUB_OUTPUT}"
          echo "path=${artifact_path}" >> "${GITHUB_OUTPUT}"
        env:
          target: ${{ matrix.target }}

      - name: Upload artifacts
        if: ${{ steps.artifact.outputs.path }}
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: ${{ steps.artifact.outputs.path }}
          if-no-files-found: error

  publish:
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    steps:
      - name: Check out repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.lint.outputs.toolchain }}

      - name: Set up cache
        uses: Swatinem/rust-cache@3cf7f8cc28d1b4e7d01e3783be10a97d55d483c8 # v2.7.1

      - name: Check if crate should be published
        uses: SebRollen/toml-action@9062fbef52816d61278d24ce53c8070440e1e8dd
        id: cargo-toml-publish
        with:
          file: Cargo.toml
          field: 'package.publish'

      - name: Download artifacts
        id: download-artifacts
        if: needs.build.outputs.artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
        with:
          path:
            ${{ runner.temp }}/artifacts

      - name: Log into crates.io
        if: steps.cargo-toml-publish.outputs.value != 'false' && github.event_name != 'pull_request'
        run: cargo login ${{ secrets.CRATESIO_TOKEN }}

      - name: Upload GitHub release artifacts
        if: >
          needs.build.outputs.artifact != '' && github.event_name == 'push' && (
            github.ref == format('refs/heads/{0}', github.event.repository.default_branch) ||
            startsWith(github.ref, 'refs/tags/v')
          )
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
        with:
          draft: ${{ !startsWith(github.ref, 'refs/tags/v') }}
          files: |
            ${{ steps.download-artifacts.outputs.download-path }}/*/*

      - name: Publish crate
        if: steps.cargo-toml-publish.outputs.value != 'false'
        run: cargo publish ${{ !startsWith(github.ref, 'refs/tags/v') && '--dry-run' || '' }}
